<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute"
	width="800" 
	height="600"
	frameRate="100"
	creationComplete="creationComplete()"
	enterFrame="enterFrame(event)"
	click="click(event)"
	mouseDown="mouseDown(event)"
	mouseUp="mouseUp(event)"
	mouseMove="mouseMove(event)"
	currentState="Game">
	
	<mx:states>
		<mx:State 
			name="Game"			
			enterState="enterGame(event)"
			exitState="exitGame(event)">
		</mx:State>
	</mx:states>
	
	<mx:Canvas x="0" y="0" width="100%" height="100%" id="myCanvas" />
	
	
	
	<mx:Script>
		<![CDATA[  
			import com.adobe.serialization.json.JSON;
			
			import flash.external.*;
			
			import mx.controls.Alert;

			public function myFunc(s:String):void {
				//testLabel.text=s;
			}
				
			protected var inGame:Boolean = false;
			protected var currentLevel:int = 1;

			public function creationComplete():void
			{
				//flash init goes here 
				
				
				//function registartion for JS call
				//ExternalInterface.addCallback("myFlexFunction",myFunc);	
				//ExternalInterface.addCallback("sync_Model",sync_Model);
			}
			
			public function sync_Model( isCurrentPlayer:String, modelGuid:String, posX:String, posY:String, angle:String, movingSpeed:String):void
			{
				var foundObj:GameObject = null;
				if(inGame)
				{
					if(isCurrentPlayer == "1")
					{
						foundObj = GameObjectManager.Instance.findObjectInArray("current_player_guid");
					}
					else
					{
						foundObj = GameObjectManager.Instance.findObjectInArray(modelGuid);
					}
					if(foundObj != null)
					{
						foundObj.position.x = parseFloat(posX);
						foundObj.position.y = parseFloat(posY);
						foundObj.unitMoveAngle = parseFloat(angle);
						foundObj.unitSpeed = parseFloat(movingSpeed);
					}
					else
					{
						//new Enemy().startupBasicEnemy(modelGuid, ResourceManager.WarriorAvatarGraphics1, new Point(parseFloat(posX), parseFloat(posY)), parseFloat(angle), parseFloat(movingSpeed));
					}
				}
				
			}
			public function enterFrame(event:Event):void
			{
				if (inGame)
				{
					GameObjectManager.Instance.enterFrame();
					
					myCanvas.graphics.clear();
					myCanvas.graphics.beginBitmapFill(GameObjectManager.Instance.backBuffer, null, false, false);
					myCanvas.graphics.drawRect(0, 0, this.width, this.height);
					myCanvas.graphics.endFill();
				}	
			}
			
			private function click(event:MouseEvent):void
			{
				GameObjectManager.Instance.click(event);
			}
			
			private function mouseDown(event:MouseEvent):void
			{
				GameObjectManager.Instance.mouseDown(event);
			}
			
			private function mouseUp(event:MouseEvent):void
			{
				GameObjectManager.Instance.mouseUp(event);
			}
			
			private function mouseMove(event:MouseEvent):void
			{
				GameObjectManager.Instance.mouseMove(event);
			}
			private var myLoader:URLLoader;
			private var definitionXML:XML;
			
			public function ResourcesRecieved():void
			{
				LevelDefinitions.Instance.startup(definitionXML);
				Level.Instance.startup(currentLevel);
				inGame = true;
			}
			
			
			private function processXML(e:Event):void 
			{
				definitionXML = new XML(e.target.data);
				ResourceManager.getInstance().LoadResources(definitionXML, this);
			}
			
			
			private function processXML_Error(e:IOErrorEvent):void
			{
				mx.controls.Alert.show("processXML_Error");
				throw new Error("processXML_Error");
			}

			private function processXML_SecurityError(e:SecurityErrorEvent):void
			{
				mx.controls.Alert.show("processXML_SecurityError");
				throw new Error("processXML_SecurityError");
			}
			
			protected function enterGame(event:Event):void
			{		
				// TODO call javascript function for XML map name
				//GameObjectManager.Instance.startup();
				
				myLoader = new URLLoader();
				myLoader.load(new URLRequest("http://www.vabank.clan.su/private/media/map1.xml"));
				myLoader.addEventListener(Event.COMPLETE, processXML);
				myLoader.addEventListener(IOErrorEvent.IO_ERROR, processXML_Error);
				myLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, processXML_SecurityError);
			}
			
			protected function exitGame(event:Event):void
			{
				Level.Instance.shutdown();
				GameObjectManager.Instance.shutdown();
				inGame = false;
			}  
			
		]]>
	</mx:Script>
	
</mx:Application>
